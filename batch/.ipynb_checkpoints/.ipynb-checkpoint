{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import random\n",
    "import pylab\n",
    "from scipy import stats\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_cost_function(m, t0, t1, x, y):\n",
    "  return 1/2/m * sum([(t0 + t1* np.asarray([x[i]]) - y[i])**2 for i in range(m)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "costarr=[]\n",
    "def gradient_descent(alpha, x, y, ep=0.0001, max_iter=1000):\n",
    "    converged = False\n",
    "    iter = 0\n",
    "    m = x.shape[0] # number of samples\n",
    "\n",
    "    # initial theta\n",
    "    t0 = 20\n",
    "    t1 = 1\n",
    "\n",
    "    # total error, J(theta)\n",
    "    J = compute_cost_function(m, t0, t1, x, y)\n",
    "    print('J=', J);\n",
    "    # Iterate Loop\n",
    "    num_iter = 0\n",
    "    while not converged:\n",
    "        # for each training sample, compute the gradient (d/d_theta j(theta))\n",
    "        grad0 = 1.0/m * sum([(t0 + t1*np.asarray([x[i]]) - y[i]) for i in range(m)]) \n",
    "        grad1 = 1.0/m * sum([(t0 + t1*np.asarray([x[i]]) - y[i])*np.asarray([x[i]]) for i in range(m)])\n",
    "\n",
    "        # update the theta_temp\n",
    "        temp0 = t0 - alpha * grad0\n",
    "        temp1 = t1 - alpha * grad1\n",
    "    \n",
    "        # update theta\n",
    "        t0 = temp0\n",
    "        t1 = temp1\n",
    "\n",
    "        # mean squared error\n",
    "        e = compute_cost_function(m, t0, t1, x, y)\n",
    "        costarr.append(e)\n",
    "        \n",
    "        print ('J = ', e)\n",
    "        J = e   # update error \n",
    "        iter += 1  # update iter\n",
    "    \n",
    "        if iter == max_iter:\n",
    "            print ('Max interactions exceeded!')\n",
    "            converged = True\n",
    "\n",
    "    return t0,t1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_cost_function(x, y, m):\n",
    "    t0 = list(range(0, x.shape[0]))\n",
    "    j_values = []\n",
    "    for i in range(len(t0)):\n",
    "        j_values.append(compute_cost_function(m, i, i, x, y)[0])\n",
    "    print ('j_values', len(j_values), len(x), len(y))\n",
    "    fig = plt.figure()\n",
    "    ax = fig.gca(projection='3d')\n",
    "    ax.plot(x, y, j_values, label='parametric curve')\n",
    "    ax.legend()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J= [3.19938761]\n",
      "J =  [2.99655754]\n",
      "J =  [2.88016441]\n",
      "J =  [2.81335982]\n",
      "J =  [2.77500414]\n",
      "J =  [2.7529697]\n",
      "J =  [2.74029896]\n",
      "J =  [2.73300042]\n",
      "J =  [2.72878419]\n",
      "J =  [2.72633657]\n",
      "J =  [2.72490391]\n",
      "J =  [2.72405382]\n",
      "J =  [2.72353826]\n",
      "J =  [2.72321491]\n",
      "J =  [2.72300213]\n",
      "J =  [2.72285309]\n",
      "J =  [2.72274089]\n",
      "J =  [2.72265013]\n",
      "J =  [2.72257194]\n",
      "J =  [2.72250126]\n",
      "J =  [2.72243515]\n",
      "J =  [2.72237195]\n",
      "J =  [2.72231069]\n",
      "J =  [2.72225082]\n",
      "J =  [2.722192]\n",
      "J =  [2.72213406]\n",
      "J =  [2.72207688]\n",
      "J =  [2.7220204]\n",
      "J =  [2.72196457]\n",
      "J =  [2.72190937]\n",
      "J =  [2.72185479]\n",
      "J =  [2.7218008]\n",
      "J =  [2.7217474]\n",
      "J =  [2.72169458]\n",
      "J =  [2.72164234]\n",
      "J =  [2.72159066]\n",
      "J =  [2.72153954]\n",
      "J =  [2.72148897]\n",
      "J =  [2.72143895]\n",
      "J =  [2.72138947]\n",
      "J =  [2.72134053]\n",
      "J =  [2.72129211]\n",
      "J =  [2.72124422]\n",
      "J =  [2.72119684]\n",
      "J =  [2.72114998]\n",
      "J =  [2.72110363]\n",
      "J =  [2.72105778]\n",
      "J =  [2.72101242]\n",
      "J =  [2.72096755]\n",
      "J =  [2.72092317]\n",
      "J =  [2.72087927]\n",
      "J =  [2.72083584]\n",
      "J =  [2.72079288]\n",
      "J =  [2.72075039]\n",
      "J =  [2.72070835]\n",
      "J =  [2.72066678]\n",
      "J =  [2.72062565]\n",
      "J =  [2.72058496]\n",
      "J =  [2.72054472]\n",
      "J =  [2.72050491]\n",
      "J =  [2.72046553]\n",
      "J =  [2.72042657]\n",
      "J =  [2.72038804]\n",
      "J =  [2.72034993]\n",
      "J =  [2.72031222]\n",
      "J =  [2.72027493]\n",
      "J =  [2.72023804]\n",
      "J =  [2.72020154]\n",
      "J =  [2.72016544]\n",
      "J =  [2.72012973]\n",
      "J =  [2.72009441]\n",
      "J =  [2.72005947]\n",
      "J =  [2.72002491]\n",
      "J =  [2.71999072]\n",
      "J =  [2.7199569]\n",
      "J =  [2.71992345]\n",
      "J =  [2.71989036]\n",
      "J =  [2.71985762]\n",
      "J =  [2.71982524]\n",
      "J =  [2.71979321]\n",
      "J =  [2.71976153]\n",
      "J =  [2.71973019]\n",
      "J =  [2.71969919]\n",
      "J =  [2.71966852]\n",
      "J =  [2.71963819]\n",
      "J =  [2.71960818]\n",
      "J =  [2.7195785]\n",
      "J =  [2.71954913]\n",
      "J =  [2.71952009]\n",
      "J =  [2.71949136]\n",
      "J =  [2.71946294]\n",
      "J =  [2.71943483]\n",
      "J =  [2.71940702]\n",
      "J =  [2.71937951]\n",
      "J =  [2.7193523]\n",
      "J =  [2.71932539]\n",
      "J =  [2.71929876]\n",
      "J =  [2.71927243]\n",
      "J =  [2.71924638]\n",
      "J =  [2.71922061]\n",
      "J =  [2.71919511]\n",
      "J =  [2.7191699]\n",
      "J =  [2.71914495]\n",
      "J =  [2.71912028]\n",
      "J =  [2.71909587]\n",
      "J =  [2.71907173]\n",
      "J =  [2.71904785]\n",
      "J =  [2.71902423]\n",
      "J =  [2.71900086]\n",
      "J =  [2.71897774]\n",
      "J =  [2.71895488]\n",
      "J =  [2.71893226]\n",
      "J =  [2.71890989]\n",
      "J =  [2.71888775]\n",
      "J =  [2.71886586]\n",
      "J =  [2.71884421]\n",
      "J =  [2.71882279]\n",
      "J =  [2.7188016]\n",
      "J =  [2.71878064]\n",
      "J =  [2.7187599]\n",
      "J =  [2.71873939]\n",
      "J =  [2.7187191]\n",
      "J =  [2.71869904]\n",
      "J =  [2.71867918]\n",
      "J =  [2.71865955]\n",
      "J =  [2.71864012]\n",
      "J =  [2.71862091]\n",
      "J =  [2.7186019]\n",
      "J =  [2.7185831]\n",
      "J =  [2.7185645]\n",
      "J =  [2.71854611]\n",
      "J =  [2.71852791]\n",
      "J =  [2.71850991]\n",
      "J =  [2.7184921]\n",
      "J =  [2.71847449]\n",
      "J =  [2.71845706]\n",
      "J =  [2.71843983]\n",
      "J =  [2.71842278]\n",
      "J =  [2.71840591]\n",
      "J =  [2.71838923]\n",
      "J =  [2.71837273]\n",
      "J =  [2.71835641]\n",
      "J =  [2.71834026]\n",
      "J =  [2.71832429]\n",
      "J =  [2.71830849]\n",
      "J =  [2.71829286]\n",
      "J =  [2.7182774]\n",
      "J =  [2.71826211]\n",
      "J =  [2.71824698]\n",
      "J =  [2.71823202]\n",
      "J =  [2.71821722]\n",
      "J =  [2.71820258]\n",
      "J =  [2.71818809]\n",
      "J =  [2.71817377]\n",
      "J =  [2.7181596]\n",
      "J =  [2.71814558]\n",
      "J =  [2.71813171]\n",
      "J =  [2.71811799]\n",
      "J =  [2.71810443]\n",
      "J =  [2.718091]\n",
      "J =  [2.71807773]\n",
      "J =  [2.71806459]\n",
      "J =  [2.7180516]\n",
      "J =  [2.71803875]\n",
      "J =  [2.71802604]\n",
      "J =  [2.71801347]\n",
      "J =  [2.71800103]\n",
      "J =  [2.71798872]\n",
      "J =  [2.71797655]\n",
      "J =  [2.71796451]\n",
      "J =  [2.71795261]\n",
      "J =  [2.71794083]\n",
      "J =  [2.71792917]\n",
      "J =  [2.71791765]\n",
      "J =  [2.71790624]\n",
      "J =  [2.71789497]\n",
      "J =  [2.71788381]\n",
      "J =  [2.71787277]\n",
      "J =  [2.71786186]\n",
      "J =  [2.71785106]\n",
      "J =  [2.71784038]\n",
      "J =  [2.71782981]\n",
      "J =  [2.71781936]\n",
      "J =  [2.71780902]\n",
      "J =  [2.71779879]\n",
      "J =  [2.71778867]\n",
      "J =  [2.71777867]\n",
      "J =  [2.71776877]\n",
      "J =  [2.71775897]\n",
      "J =  [2.71774929]\n",
      "J =  [2.71773971]\n",
      "J =  [2.71773023]\n",
      "J =  [2.71772085]\n",
      "J =  [2.71771158]\n",
      "J =  [2.71770241]\n",
      "J =  [2.71769333]\n",
      "J =  [2.71768435]\n",
      "J =  [2.71767547]\n",
      "J =  [2.71766669]\n",
      "J =  [2.717658]\n",
      "J =  [2.71764941]\n",
      "J =  [2.71764091]\n",
      "J =  [2.7176325]\n",
      "J =  [2.71762418]\n",
      "J =  [2.71761595]\n",
      "J =  [2.71760781]\n",
      "J =  [2.71759976]\n",
      "J =  [2.71759179]\n",
      "J =  [2.71758392]\n",
      "J =  [2.71757612]\n",
      "J =  [2.71756841]\n",
      "J =  [2.71756079]\n",
      "J =  [2.71755324]\n",
      "J =  [2.71754578]\n",
      "J =  [2.7175384]\n",
      "J =  [2.7175311]\n",
      "J =  [2.71752388]\n",
      "J =  [2.71751673]\n",
      "J =  [2.71750967]\n",
      "J =  [2.71750268]\n",
      "J =  [2.71749576]\n",
      "J =  [2.71748892]\n",
      "J =  [2.71748216]\n",
      "J =  [2.71747546]\n",
      "J =  [2.71746884]\n",
      "J =  [2.71746229]\n",
      "J =  [2.71745582]\n",
      "J =  [2.71744941]\n",
      "J =  [2.71744307]\n",
      "J =  [2.7174368]\n",
      "J =  [2.7174306]\n",
      "J =  [2.71742446]\n",
      "J =  [2.71741839]\n",
      "J =  [2.71741239]\n",
      "J =  [2.71740645]\n",
      "J =  [2.71740058]\n",
      "J =  [2.71739477]\n",
      "J =  [2.71738902]\n",
      "J =  [2.71738333]\n",
      "J =  [2.71737771]\n",
      "J =  [2.71737214]\n",
      "J =  [2.71736664]\n",
      "J =  [2.7173612]\n",
      "J =  [2.71735581]\n",
      "J =  [2.71735048]\n",
      "J =  [2.71734522]\n",
      "J =  [2.71734]\n",
      "J =  [2.71733485]\n",
      "J =  [2.71732975]\n",
      "J =  [2.7173247]\n",
      "J =  [2.71731971]\n",
      "J =  [2.71731478]\n",
      "J =  [2.71730989]\n",
      "J =  [2.71730506]\n",
      "J =  [2.71730029]\n",
      "J =  [2.71729556]\n",
      "J =  [2.71729088]\n",
      "J =  [2.71728626]\n",
      "J =  [2.71728168]\n",
      "J =  [2.71727716]\n",
      "J =  [2.71727268]\n",
      "J =  [2.71726826]\n",
      "J =  [2.71726388]\n",
      "J =  [2.71725954]\n",
      "J =  [2.71725526]\n",
      "J =  [2.71725102]\n",
      "J =  [2.71724682]\n",
      "J =  [2.71724268]\n",
      "J =  [2.71723857]\n",
      "J =  [2.71723451]\n",
      "J =  [2.7172305]\n",
      "J =  [2.71722653]\n",
      "J =  [2.7172226]\n",
      "J =  [2.71721871]\n",
      "J =  [2.71721487]\n",
      "J =  [2.71721107]\n",
      "J =  [2.7172073]\n",
      "J =  [2.71720358]\n",
      "J =  [2.7171999]\n",
      "J =  [2.71719626]\n",
      "J =  [2.71719266]\n",
      "J =  [2.7171891]\n",
      "J =  [2.71718557]\n",
      "J =  [2.71718209]\n",
      "J =  [2.71717864]\n",
      "J =  [2.71717523]\n",
      "J =  [2.71717186]\n",
      "J =  [2.71716852]\n",
      "J =  [2.71716522]\n",
      "J =  [2.71716195]\n",
      "J =  [2.71715872]\n",
      "J =  [2.71715552]\n",
      "J =  [2.71715236]\n",
      "J =  [2.71714924]\n",
      "J =  [2.71714614]\n",
      "J =  [2.71714308]\n",
      "J =  [2.71714006]\n",
      "J =  [2.71713706]\n",
      "J =  [2.7171341]\n",
      "J =  [2.71713117]\n",
      "J =  [2.71712828]\n",
      "J =  [2.71712541]\n",
      "J =  [2.71712257]\n",
      "J =  [2.71711977]\n",
      "J =  [2.717117]\n",
      "J =  [2.71711425]\n",
      "J =  [2.71711154]\n",
      "J =  [2.71710885]\n",
      "J =  [2.7171062]\n",
      "J =  [2.71710357]\n",
      "J =  [2.71710097]\n",
      "J =  [2.7170984]\n",
      "J =  [2.71709585]\n",
      "J =  [2.71709334]\n",
      "J =  [2.71709085]\n",
      "J =  [2.71708839]\n",
      "J =  [2.71708595]\n",
      "J =  [2.71708355]\n",
      "J =  [2.71708116]\n",
      "J =  [2.71707881]\n",
      "J =  [2.71707647]\n",
      "J =  [2.71707417]\n",
      "J =  [2.71707189]\n",
      "J =  [2.71706963]\n",
      "J =  [2.7170674]\n",
      "J =  [2.71706519]\n",
      "J =  [2.71706301]\n",
      "J =  [2.71706085]\n",
      "J =  [2.71705871]\n",
      "J =  [2.7170566]\n",
      "J =  [2.7170545]\n",
      "J =  [2.71705244]\n",
      "J =  [2.71705039]\n",
      "J =  [2.71704837]\n",
      "J =  [2.71704636]\n",
      "J =  [2.71704438]\n",
      "J =  [2.71704242]\n",
      "J =  [2.71704049]\n",
      "J =  [2.71703857]\n",
      "J =  [2.71703667]\n",
      "J =  [2.7170348]\n",
      "J =  [2.71703294]\n",
      "J =  [2.71703111]\n",
      "J =  [2.71702929]\n",
      "J =  [2.71702749]\n",
      "J =  [2.71702572]\n",
      "J =  [2.71702396]\n",
      "J =  [2.71702222]\n",
      "J =  [2.7170205]\n",
      "J =  [2.7170188]\n",
      "J =  [2.71701712]\n",
      "J =  [2.71701546]\n",
      "J =  [2.71701381]\n",
      "J =  [2.71701218]\n",
      "J =  [2.71701057]\n",
      "J =  [2.71700898]\n",
      "J =  [2.7170074]\n",
      "J =  [2.71700584]\n",
      "J =  [2.7170043]\n",
      "J =  [2.71700277]\n",
      "J =  [2.71700126]\n",
      "J =  [2.71699977]\n",
      "J =  [2.71699829]\n",
      "J =  [2.71699683]\n",
      "J =  [2.71699539]\n",
      "J =  [2.71699396]\n",
      "J =  [2.71699255]\n",
      "J =  [2.71699115]\n",
      "J =  [2.71698976]\n",
      "J =  [2.7169884]\n",
      "J =  [2.71698704]\n",
      "J =  [2.7169857]\n",
      "J =  [2.71698438]\n",
      "J =  [2.71698307]\n",
      "J =  [2.71698177]\n",
      "J =  [2.71698049]\n",
      "J =  [2.71697922]\n",
      "J =  [2.71697797]\n",
      "J =  [2.71697673]\n",
      "J =  [2.7169755]\n",
      "J =  [2.71697428]\n",
      "J =  [2.71697308]\n",
      "J =  [2.7169719]\n",
      "J =  [2.71697072]\n",
      "J =  [2.71696956]\n",
      "J =  [2.71696841]\n",
      "J =  [2.71696727]\n",
      "J =  [2.71696614]\n",
      "J =  [2.71696503]\n",
      "J =  [2.71696393]\n",
      "J =  [2.71696284]\n",
      "J =  [2.71696176]\n",
      "J =  [2.7169607]\n",
      "J =  [2.71695964]\n",
      "J =  [2.7169586]\n",
      "J =  [2.71695757]\n",
      "J =  [2.71695655]\n",
      "J =  [2.71695554]\n",
      "J =  [2.71695454]\n",
      "J =  [2.71695355]\n",
      "J =  [2.71695258]\n",
      "J =  [2.71695161]\n",
      "J =  [2.71695066]\n",
      "J =  [2.71694971]\n",
      "J =  [2.71694877]\n",
      "J =  [2.71694785]\n",
      "J =  [2.71694693]\n",
      "J =  [2.71694603]\n",
      "J =  [2.71694513]\n",
      "J =  [2.71694425]\n",
      "J =  [2.71694337]\n",
      "J =  [2.7169425]\n",
      "J =  [2.71694165]\n",
      "J =  [2.7169408]\n",
      "J =  [2.71693996]\n",
      "J =  [2.71693913]\n",
      "J =  [2.71693831]\n",
      "J =  [2.7169375]\n",
      "J =  [2.71693669]\n",
      "J =  [2.7169359]\n",
      "J =  [2.71693511]\n",
      "J =  [2.71693434]\n",
      "J =  [2.71693357]\n",
      "J =  [2.71693281]\n",
      "J =  [2.71693205]\n",
      "J =  [2.71693131]\n",
      "J =  [2.71693057]\n",
      "J =  [2.71692984]\n",
      "J =  [2.71692912]\n",
      "J =  [2.71692841]\n",
      "J =  [2.71692771]\n",
      "J =  [2.71692701]\n",
      "J =  [2.71692632]\n",
      "J =  [2.71692564]\n",
      "J =  [2.71692496]\n",
      "J =  [2.71692429]\n",
      "J =  [2.71692363]\n",
      "J =  [2.71692298]\n",
      "J =  [2.71692233]\n",
      "J =  [2.71692169]\n",
      "J =  [2.71692106]\n",
      "J =  [2.71692044]\n",
      "J =  [2.71691982]\n",
      "J =  [2.7169192]\n",
      "J =  [2.7169186]\n",
      "J =  [2.716918]\n",
      "J =  [2.71691741]\n",
      "J =  [2.71691682]\n",
      "J =  [2.71691624]\n",
      "J =  [2.71691567]\n",
      "J =  [2.7169151]\n",
      "J =  [2.71691454]\n",
      "J =  [2.71691398]\n",
      "J =  [2.71691344]\n",
      "J =  [2.71691289]\n",
      "J =  [2.71691236]\n",
      "J =  [2.71691182]\n",
      "J =  [2.7169113]\n",
      "J =  [2.71691078]\n",
      "J =  [2.71691026]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "J =  [2.71690976]\n",
      "J =  [2.71690925]\n",
      "J =  [2.71690875]\n",
      "J =  [2.71690826]\n",
      "J =  [2.71690777]\n",
      "J =  [2.71690729]\n",
      "J =  [2.71690682]\n",
      "J =  [2.71690634]\n",
      "J =  [2.71690588]\n",
      "J =  [2.71690542]\n",
      "J =  [2.71690496]\n",
      "J =  [2.71690451]\n",
      "J =  [2.71690406]\n",
      "J =  [2.71690362]\n",
      "J =  [2.71690318]\n",
      "J =  [2.71690275]\n",
      "J =  [2.71690232]\n",
      "J =  [2.7169019]\n",
      "J =  [2.71690148]\n",
      "J =  [2.71690107]\n",
      "J =  [2.71690066]\n",
      "J =  [2.71690025]\n",
      "J =  [2.71689985]\n",
      "J =  [2.71689946]\n",
      "J =  [2.71689907]\n",
      "J =  [2.71689868]\n",
      "J =  [2.71689829]\n",
      "J =  [2.71689791]\n",
      "J =  [2.71689754]\n",
      "J =  [2.71689717]\n",
      "J =  [2.7168968]\n",
      "J =  [2.71689644]\n",
      "J =  [2.71689608]\n",
      "J =  [2.71689572]\n",
      "J =  [2.71689537]\n",
      "J =  [2.71689502]\n",
      "J =  [2.71689468]\n",
      "J =  [2.71689434]\n",
      "J =  [2.716894]\n",
      "J =  [2.71689367]\n",
      "J =  [2.71689334]\n",
      "Max interactions exceeded!\n",
      "theta0 = [19.60848268] theta1 = [0.88712141]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done!\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "  \n",
    "    df = pd.read_csv('6.txt', names=['x','y'])\n",
    "    x = df['x']\n",
    "    y = df['y']\n",
    "     \n",
    "    alpha = 0.06 # learning rate\n",
    "    ep = 0.0001 # convergence criteria\n",
    "\n",
    "    # call gradient decent, and get intercept(=theta0) and slope(=theta1)\n",
    "    theta0, theta1 = gradient_descent(alpha, x, y, ep, max_iter=500)\n",
    "    print ('theta0 = ' + str(theta0)+' theta1 = '+str(theta1))\n",
    "    #plot_cost_function(x, y, x.shape[0])\n",
    "\n",
    "    # plot\n",
    "    for i in range(x.shape[0]):\n",
    "        y_predict = theta0 + theta1*x \n",
    "\n",
    "    pylab.plot(x,y,'o')\n",
    "    pylab.plot(x,y_predict,'k-')\n",
    "    pylab.show()\n",
    "    print (\"Done!\")\n",
    "    \n",
    "    #training and testing set with error "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=[i for i in range(0,len(costarr))]\n",
    "plt.plot(x,costarr)\n",
    "plt.xlabel('epochs')\n",
    "plt.ylabel(\"J (θ)\")\n",
    "plt.title(\"Epochs vs Cost\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
